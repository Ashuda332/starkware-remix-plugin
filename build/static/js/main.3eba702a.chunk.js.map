{"version":3,"sources":["helpers/common.tsx","components/CompilationError/CompilationError.tsx","App.tsx","index.tsx"],"names":["DeployScriptContent","randomAddress","Error","props","message","className","remixClient","createClient","PluginClient","deployScriptDirectory","allowedFileExtensions","App","useState","compiledContract","setContract","compilationError","setCompilationError","error","setError","deployIsLoading","setLoading","undefined","deployedContract","setDeployedContract","hasCreatedScript","setScriptStatus","noFileSelected","setNoFileSelected","selectedNetwork","setSelectedNetwork","compiling","setCompilingStatus","compileContract","a","call","currentFile","currentFileExtension","split","pop","includes","currentFileContent","runContractCompilation","fetch","process","method","headers","accept","body","JSON","stringify","action","code","response","json","responseData","console","deployScript","then","role","onClick","window","location","reload","value","onChange","event","target","Provider","network","addTransaction","type","contract_definition","contract_address_salt","constructor_calldata","res","address","catch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3eba702a.chunk.js","sourcesContent":["import { CompiledContract } from 'starknet';\nimport { randomAddress } from 'starknet/dist/utils/stark';\n\nexport type ContractType = {\n    contract_definition: CompiledContract,\n    version: number\n}\n\nexport type NetworkName = 'mainnet-alpha' | 'goerli-alpha';\n\n\nexport const DeployScriptContent = `\n// Right click on the script name and hit \"Run\" to execute\n(async () => {\n    try {\n        console.log('deploy to starknet...')\n        const compiledCairoContract = await remix.call('fileManager', 'readFile', 'compiled_cairo_artifacts/contract.json');\n        const compiledContract = starknet.json.parse(compiledCairoContract);\n        \n        const provider = new starknet.Provider({\n          network: 'mainnet-alpha' // mainnet-alpha or goerli-alpha\n        })\n\n        const res = await provider.addTransaction({\n          type: 'DEPLOY',\n          contract_definition: compiledContract.contract_definition,\n          contract_address_salt: '${randomAddress()}',\n          constructor_calldata: []\n        })\n\n        //  const methodResponse = await callContract({\n        //    contract_address: res.address,\n        //    entry_point_selector: getSelectorFromName(\"YOUR_FUNCTION_NAME\"),\n        //    calldata: [\"1\"],\n        //  });\n\n        // const result = methodResponse.result[0];\n        // result contains the return value of the method you gave to callContract\n\n        console.log('Deployed contract address: ', res.address)\n        console.log('Deployment successful.')\n    } catch (e) {\n        console.log(e.message)\n    }\n})()\n`","import React, {ReactElement} from \"react\";\nimport './CompilationError.css'\n\ninterface ErrorBlobProps{\n    message: string\n}\nconst Error: React.FC<ErrorBlobProps> = (props:ErrorBlobProps): ReactElement => {\n    const {message } = props\n\n    return (\n    <div className=\"cairoErrorBlob\">\n        <div className=\"cairoError alertDanger\">\n          <pre>\n            <span>{message}</span>\n          </pre>\n        </div>\n    </div>\n)\n}\n\nexport default Error;","import { createClient } from '@remixproject/plugin-webview'\nimport { PluginClient } from '@remixproject/plugin'\nimport { Provider, } from 'starknet';\nimport { useState } from 'react'\nimport { randomAddress } from 'starknet/dist/utils/stark';\nimport { NetworkName, ContractType, DeployScriptContent } from './helpers/common';\nimport Error from './components/CompilationError/CompilationError';\nimport './App.css'\n\nconst remixClient = createClient(new PluginClient())\nconst cairoHostUrl : string = process.env.REACT_APP_CAIRO_HOST_URL || '';\nconst deployScriptDirectory = './scripts/deploy.js';\nconst contractDirectory = 'compiled_cairo_artifacts/contract.json';\nconst allowedFileExtensions = ['cairo'];\n\nfunction App() {\n  const [compiledContract, setContract] = useState<ContractType | null>(null);\n  const [compilationError, setCompilationError] = useState<any>(null);\n  const [error, setError] = useState<any>(false);\n  const [deployIsLoading, setLoading] = useState(false);\n  const [deployedContract, setDeployedContract] = useState<string | undefined>(undefined);\n  const [hasCreatedScript, setScriptStatus] = useState(false);\n  const [noFileSelected, setNoFileSelected] = useState(false);\n  const [selectedNetwork, setSelectedNetwork] = useState<NetworkName>('mainnet-alpha');\n  const [compiling, setCompilingStatus] = useState(false);\n\n  const compileContract = async () => {\n    setLoading(false);\n    setContract(null);\n    setScriptStatus(false);\n    setNoFileSelected(false);\n    setDeployedContract(undefined);\n    setCompilationError(null)\n\n    let currentFile: string;\n\n    try {\n      currentFile = await remixClient.call('fileManager', 'getCurrentFile');\n    } catch (error) {\n      setNoFileSelected(true);\n      return;\n    }\n\n    const currentFileExtension = currentFile.split('.').pop() || '';\n\n    if (!allowedFileExtensions.includes(currentFileExtension)) {\n      setNoFileSelected(true);\n      return;\n    }\n\n    const currentFileContent = await remixClient.call('fileManager', 'readFile', currentFile);\n\n    setCompilingStatus(true);\n    runContractCompilation(currentFileContent);\n  }\n\n  const runContractCompilation = async (currentFileContent: string) => {\n    try {\n      const response = await fetch(cairoHostUrl, {\n        method: 'POST',\n        headers: {\n          accept: 'application/json',\n        },\n        body: JSON.stringify({\n          action: \"compile-contract\",\n          code: currentFileContent\n        })\n      });\n      const responseData = await response.json();\n      setCompilingStatus(false);\n      if (responseData.error) {\n        setCompilationError(responseData.error);\n        return;\n      }\n\n      setContract(responseData);\n    } catch(exception) {\n      console.error(exception);\n    }\n  }\n\n  const deployContract = () => {\n    if(!compiledContract) {\n      return;\n    }\n\n    setLoading(true);\n\n    const provider = new Provider({\n      network: selectedNetwork,\n    })\n\n    provider.addTransaction({\n      type: 'DEPLOY',\n      contract_definition: compiledContract.contract_definition,\n      contract_address_salt: randomAddress(),\n      constructor_calldata: []\n    })\n    .then((res) => {\n      setLoading(false);\n      setDeployedContract(res.address);\n    })\n    .catch(setError);\n  }\n\n  const deployScript = async () => {\n    await remixClient.call('fileManager', 'writeFile', contractDirectory, JSON.stringify(compiledContract));\n\n    remixClient.call('fileManager', 'writeFile', deployScriptDirectory, DeployScriptContent).then(() => setScriptStatus(true));\n  }\n\n  if(error) {\n    return (\n      <div className=\"container\">\n        <h4>Error while compiling</h4>\n        <div role=\"button\" onClick={() => window.location.reload()}>Reload plugin</div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"container\">\n      <div role=\"button\" onClick={compileContract}>{\n        compiling ? 'Compiling...' : 'Compile current file'\n      }</div>\n      {compiledContract ? (\n        <>\n          <div className='networkSelect'>\n            <label>STARKNET NETWORK</label>\n            <select value={selectedNetwork} onChange={(event) => setSelectedNetwork(event.target.value as NetworkName)}>\n              <option value=\"mainnet-alpha\">mainnet-alpha</option>\n              <option value=\"goerli-alpha\">goerli-alpha</option>\n            </select>\n          </div>\n          <div role=\"button\" onClick={deployContract}>Deploy</div>\n        </>\n      ) : null}\n\n      {deployIsLoading ? <p>Deploying...</p> : null}\n\n      {deployedContract && !deployIsLoading ? \n        <>\n          <p>Deployed contract address</p>\n          <p className=\"contractAddress\">{deployedContract}</p>\n        </>\n      : null}\n\n      {compiledContract ? <div role=\"button\" onClick={deployScript}>Create deploy script</div> : null}\n\n      {hasCreatedScript ? <p>Created script at {deployScriptDirectory}</p> : null}\n\n      {noFileSelected ? <p>Please select file containing Cairo contract</p> : null}\n\n      {compilationError ?  <Error message={compilationError} /> : null}\n\n    </div>  \n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}